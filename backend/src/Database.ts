//Source code generated by AppGPT (www.appgpt.tech)

//Class to create tables and seed new database
import { DataSource } from 'typeorm';
import { DBConfiguration } from './Configuration';
import { SettingsEntity } from './db/Settings.entity';
//autogenerate imports based on resources
import { UsersEntity } from './db/Users.entity';
import { CustomersEntity } from './db/Customers.entity';
import { WorkoutsEntity } from './db/Workouts.entity';
import { NutritionEntity } from './db/Nutrition.entity';
import { HealthMetricsEntity } from './db/HealthMetrics.entity';
import { NotificationsEntity } from './db/Notifications.entity';
import { SupportTicketsEntity } from './db/SupportTickets.entity';

export class Database {
  static dbConfiguration: DBConfiguration;
  public static ds: DataSource;

  static async Initialize(dbConfiguration: DBConfiguration) {
    Database.dbConfiguration = dbConfiguration;
    let dbConfig: any = dbConfiguration as any;
    //Autogenerate entities array from resource names

    dbConfig.entities = [
      SettingsEntity,
      UsersEntity,
      CustomersEntity,
      WorkoutsEntity,
      NutritionEntity,
      HealthMetricsEntity,
      NotificationsEntity,
      SupportTicketsEntity,
    ];
    Database.ds = new DataSource(dbConfig);
    await Database.ds.initialize();

    //TODO: Drop all tables

    await Database.Seed();
  }
  static async Seed() {
    let data: any = {
      Users: [
        {
          userId: 1,
          name: 'name 1',
          email: 'email 1',
          password: 'password 1',
          role: 'role 1',
          id: 37,
        },
        {
          userId: 2,
          name: 'name 2',
          email: 'email 2',
          password: 'password 2',
          role: 'role 2',
          id: 34,
        },
        {
          userId: 3,
          name: 'name 3',
          email: 'email 3',
          password: 'password 3',
          role: 'role 3',
          id: 97,
        },
        {
          userId: 4,
          name: 'name 4',
          email: 'email 4',
          password: 'password 4',
          role: 'role 4',
          id: 89,
        },
        {
          userId: 5,
          name: 'name 5',
          email: 'email 5',
          password: 'password 5',
          role: 'role 5',
          id: 57,
        },
      ],
      Customers: [
        {
          customerId: 1,
          email: 'email 1',
          password: 'password 1',
          name: 'name 1',
          age: 1,
          gender: 'gender 1',
          weight: 0.11,
          height: 0.73,
          healthConditions: 'healthConditions 1',
          goals: 'goals 1',
          dietaryPreferences: 'dietaryPreferences 1',
          billingAddress: 'billingAddress 1',
          country: 'country 1',
          phone: 'phone 1',
          id: 9,
        },
        {
          customerId: 2,
          email: 'email 2',
          password: 'password 2',
          name: 'name 2',
          age: 2,
          gender: 'gender 2',
          weight: 0.39,
          height: 0.09,
          healthConditions: 'healthConditions 2',
          goals: 'goals 2',
          dietaryPreferences: 'dietaryPreferences 2',
          billingAddress: 'billingAddress 2',
          country: 'country 2',
          phone: 'phone 2',
          id: 8,
        },
        {
          customerId: 3,
          email: 'email 3',
          password: 'password 3',
          name: 'name 3',
          age: 3,
          gender: 'gender 3',
          weight: 0.93,
          height: 0.46,
          healthConditions: 'healthConditions 3',
          goals: 'goals 3',
          dietaryPreferences: 'dietaryPreferences 3',
          billingAddress: 'billingAddress 3',
          country: 'country 3',
          phone: 'phone 3',
          id: 77,
        },
        {
          customerId: 4,
          email: 'email 4',
          password: 'password 4',
          name: 'name 4',
          age: 4,
          gender: 'gender 4',
          weight: 0.95,
          height: 0.45,
          healthConditions: 'healthConditions 4',
          goals: 'goals 4',
          dietaryPreferences: 'dietaryPreferences 4',
          billingAddress: 'billingAddress 4',
          country: 'country 4',
          phone: 'phone 4',
          id: 44,
        },
        {
          customerId: 5,
          email: 'email 5',
          password: 'password 5',
          name: 'name 5',
          age: 5,
          gender: 'gender 5',
          weight: 0.81,
          height: 0.21,
          healthConditions: 'healthConditions 5',
          goals: 'goals 5',
          dietaryPreferences: 'dietaryPreferences 5',
          billingAddress: 'billingAddress 5',
          country: 'country 5',
          phone: 'phone 5',
          id: 14,
        },
      ],
      Workouts: [
        {
          workoutId: 1,
          customerId: 1,
          type: 'type 1',
          duration: 0.95,
          intensity: 'intensity 1',
          caloriesBurned: 0.43,
          date: '2024-12-06T16:35:53.385Z',
          id: 36,
        },
        {
          workoutId: 2,
          customerId: 2,
          type: 'type 2',
          duration: 0.35,
          intensity: 'intensity 2',
          caloriesBurned: 0.86,
          date: '2023-09-18T19:43:05.463Z',
          id: 4,
        },
        {
          workoutId: 3,
          customerId: 3,
          type: 'type 3',
          duration: 0.22,
          intensity: 'intensity 3',
          caloriesBurned: 0.83,
          date: '2024-07-21T04:19:00.611Z',
          id: 74,
        },
        {
          workoutId: 4,
          customerId: 4,
          type: 'type 4',
          duration: 0.16,
          intensity: 'intensity 4',
          caloriesBurned: 0.08,
          date: '2023-09-22T13:03:58.782Z',
          id: 91,
        },
        {
          workoutId: 5,
          customerId: 5,
          type: 'type 5',
          duration: 0.54,
          intensity: 'intensity 5',
          caloriesBurned: 0.5,
          date: '2023-05-23T10:52:27.437Z',
          id: 23,
        },
      ],
      Nutrition: [
        {
          mealId: 1,
          customerId: 1,
          foodItem: 'foodItem 1',
          quantity: 0.26,
          calories: 0.31,
          macronutrients: 'macronutrients 1',
          date: '2023-05-09T13:15:39.566Z',
          id: 39,
        },
        {
          mealId: 2,
          customerId: 2,
          foodItem: 'foodItem 2',
          quantity: 0.13,
          calories: 0.79,
          macronutrients: 'macronutrients 2',
          date: '2024-11-21T02:48:21.564Z',
          id: 21,
        },
        {
          mealId: 3,
          customerId: 3,
          foodItem: 'foodItem 3',
          quantity: 0.41,
          calories: 0.04,
          macronutrients: 'macronutrients 3',
          date: '2024-11-27T15:21:53.664Z',
          id: 88,
        },
        {
          mealId: 4,
          customerId: 4,
          foodItem: 'foodItem 4',
          quantity: 0.35,
          calories: 0.74,
          macronutrients: 'macronutrients 4',
          date: '2024-10-26T09:01:04.259Z',
          id: 94,
        },
        {
          mealId: 5,
          customerId: 5,
          foodItem: 'foodItem 5',
          quantity: 0.06,
          calories: 0.65,
          macronutrients: 'macronutrients 5',
          date: '2024-05-03T00:09:55.057Z',
          id: 30,
        },
      ],
      HealthMetrics: [
        {
          metricId: 1,
          customerId: 1,
          type: 'type 1',
          value: 0.31,
          unit: 'unit 1',
          date: '2023-05-24T22:10:15.723Z',
          id: 49,
        },
        {
          metricId: 2,
          customerId: 2,
          type: 'type 2',
          value: 0.66,
          unit: 'unit 2',
          date: '2023-06-14T23:02:29.321Z',
          id: 6,
        },
        {
          metricId: 3,
          customerId: 3,
          type: 'type 3',
          value: 0.82,
          unit: 'unit 3',
          date: '2024-04-14T13:13:56.863Z',
          id: 9,
        },
        {
          metricId: 4,
          customerId: 4,
          type: 'type 4',
          value: 0.1,
          unit: 'unit 4',
          date: '2023-04-28T03:18:02.241Z',
          id: 48,
        },
        {
          metricId: 5,
          customerId: 5,
          type: 'type 5',
          value: 0.26,
          unit: 'unit 5',
          date: '2024-05-29T22:16:16.227Z',
          id: 33,
        },
      ],
      Notifications: [
        {
          notificationId: 1,
          customerId: 1,
          type: 'type 1',
          message: 'message 1',
          dateScheduled: '2024-12-19T05:13:13.222Z',
          status: 'status 1',
          id: 64,
        },
        {
          notificationId: 2,
          customerId: 2,
          type: 'type 2',
          message: 'message 2',
          dateScheduled: '2023-09-15T17:33:13.399Z',
          status: 'status 2',
          id: 80,
        },
        {
          notificationId: 3,
          customerId: 3,
          type: 'type 3',
          message: 'message 3',
          dateScheduled: '2023-04-28T02:17:46.155Z',
          status: 'status 3',
          id: 29,
        },
        {
          notificationId: 4,
          customerId: 4,
          type: 'type 4',
          message: 'message 4',
          dateScheduled: '2024-01-15T04:13:08.120Z',
          status: 'status 4',
          id: 19,
        },
        {
          notificationId: 5,
          customerId: 5,
          type: 'type 5',
          message: 'message 5',
          dateScheduled: '2024-06-04T17:50:08.933Z',
          status: 'status 5',
          id: 99,
        },
      ],
      SupportTickets: [
        {
          ticketId: 1,
          userId: 1,
          customerId: 1,
          description: 'description 1',
          status: 'status 1',
          creationDate: '2023-07-01T03:29:22.250Z',
          resolutionDate: '2023-07-19T14:58:20.142Z',
          id: 68,
        },
        {
          ticketId: 2,
          userId: 2,
          customerId: 2,
          description: 'description 2',
          status: 'status 2',
          creationDate: '2024-03-23T10:39:16.715Z',
          resolutionDate: '2024-04-25T01:26:17.464Z',
          id: 56,
        },
        {
          ticketId: 3,
          userId: 3,
          customerId: 3,
          description: 'description 3',
          status: 'status 3',
          creationDate: '2024-07-19T07:45:23.196Z',
          resolutionDate: '2024-12-24T17:23:53.806Z',
          id: 47,
        },
        {
          ticketId: 4,
          userId: 4,
          customerId: 4,
          description: 'description 4',
          status: 'status 4',
          creationDate: '2025-02-08T06:05:34.217Z',
          resolutionDate: '2023-11-05T00:08:05.667Z',
          id: 35,
        },
        {
          ticketId: 5,
          userId: 5,
          customerId: 5,
          description: 'description 5',
          status: 'status 5',
          creationDate: '2023-08-04T23:41:29.098Z',
          resolutionDate: '2023-06-02T10:06:06.809Z',
          id: 96,
        },
      ],
    };
    //Autogenerate multiple such calls ie for each resource and its data object
    let isSeeded = await this.IsSeeded();
    //if (!isSeeded) {
    //forcing app recreation
    if (true) {
      console.log('   Seeding database...');
      await this.SeedResource('UsersEntity', data.Users);
      await this.SeedResource('CustomersEntity', data.Customers);
      await this.SeedResource('WorkoutsEntity', data.Workouts);
      await this.SeedResource('NutritionEntity', data.Nutrition);
      await this.SeedResource('HealthMetricsEntity', data.HealthMetrics);
      await this.SeedResource('NotificationsEntity', data.Notifications);
      await this.SeedResource('SupportTicketsEntity', data.SupportTickets);
      await this.SeedResource('SettingsEntity', {
        settingname: 'isSeeded',
        settingvalue: 'true',
      });
    } else {
      console.log('   Database seeded already!');
    }
  }
  static async IsSeeded() {
    const repo = Database.ds.getRepository('SettingsEntity');
    let rec: any = await repo.findOne({
      select: {
        settingname: true,
        settingvalue: true,
      },
      where: {
        settingname: 'isSeeded',
      },
    });
    if (rec && rec.settingvalue) return true;
    return false;
  }
  static async SeedResource(resourceName: any, resourceData: any) {
    const repo = Database.ds.getRepository(resourceName);
    //await repo.clear();
    console.log('   Seeding table ' + resourceName);
    await repo.upsert(resourceData, ['id']);
  }
}
